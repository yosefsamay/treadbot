from ib_insync import *
import pandas as pd
import numpy as np
import random
import os
import tensorflow as tf
from datetime import datetime

from ta.momentum import RSIIndicator
from ta.trend import MACD
from ta.momentum import ROCIndicator
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.preprocessing import StandardScaler

# Set global random seeds for reproducibility
def set_seeds(seed=42):
    np.random.seed(seed)
    random.seed(seed)
    tf.random.set_seed(seed)
    os.environ['PYTHONHASHSEED'] = str(seed)

set_seeds()

LOOKAHEAD = 5
TAKE_PROFIT_PERCENT = 0.02  # 2%
STOP_LOSS_PERCENT = 0.01    # 1%
ORDER_QUANTITY = 10

ib = IB()
ib.connect('127.0.0.1', 7496, clientId=1)

def expand_scanner(min_market_cap=10e9, min_volume=1e6):
    scan_codes = ['MOST_ACTIVE', 'TOP_PERC_GAIN', 'TOP_PERC_LOSE', 'HOT_BY_VOLUME']
    location = 'STK.US.MAJOR'
    found = set()
    for scan_code in scan_codes:
        scan_sub = ScannerSubscription(
            instrument='STK',
            locationCode=location,
            scanCode=scan_code
        )
        try:
            results = ib.reqScannerSubscription(scan_sub)
            ib.sleep(1.5)
            for res in results:
                try:
                    symbol = res.contractDetails.contract.symbol
                    found.add(symbol)
                except Exception as e:
                    print(f"שגיאה בשליפת סימבול: {e}")
        except Exception as e:
            print(f"Scanner error ({scan_code}): {e}")
        print(f"{scan_code} → סה\"כ {len(found)} מניות")
    return list(found)

def get_ib_data(symbol, exchange='SMART', currency='USD', duration='3 Y', barSize='1 day'):
    contract = Stock(symbol, exchange, currency)
    bars = ib.reqHistoricalData(
        contract,
        endDateTime='',
        durationStr=duration,
        barSizeSetting=barSize,
        whatToShow='ADJUSTED_LAST',
        useRTH=True,
        formatDate=1
    )
    df = util.df(bars)
    df.set_index('date', inplace=True)
    return df[['open', 'high', 'low', 'close', 'volume']]

def download_data_ib(tickers):
    adj_close_dict = {}
    volume_dict = {}
    for ticker in tickers:
        try:
            df = get_ib_data(ticker)
            adj_close_dict[ticker] = df['close']
            volume_dict[ticker] = df['volume']
        except Exception as e:
            print(f"שגיאה בנתונים של {ticker}: {e}")
    if not adj_close_dict:
        return pd.DataFrame(), pd.DataFrame()
    adj_close = pd.concat(adj_close_dict, axis=1)
    volume = pd.concat(volume_dict, axis=1)
    return adj_close, volume

def create_features(df, volume_series):
    features = pd.DataFrame(index=df.index)
    features['price'] = df
    features['returns'] = df.pct_change()
    features['sma_20'] = df.rolling(window=20).mean()
    features['sma_50'] = df.rolling(window=50).mean()
    features['sma_ratio'] = features['sma_20'] / features['sma_50']
    features['volatility'] = df.pct_change().rolling(window=20).std()
    features['macd'] = MACD(df).macd_diff()
    features['rsi'] = RSIIndicator(df).rsi()
    features['momentum'] = ROCIndicator(df).roc()
    features['momentum_signal'] = (features['momentum'] > 0).astype(int).rolling(window=5).mean()
    features['open'] = df.shift(1)
    features['close'] = df
    features['prev_close'] = df.shift(1)
    features['gap_pct'] = (features['open'] - features['prev_close']) / features['prev_close']
    features['is_gap'] = (features['gap_pct'].abs() > 0.03).astype(int)
    features['gap_direction'] = np.where(features['gap_pct'] > 0, 1, np.where(features['gap_pct'] < 0, -1, 0))
    features['candle_signal'] = np.where(abs(features['close'] - features['open']) < 0.002 * features['open'], 0, np.where(features['close'] > features['open'], 1, -1))
    features['volume'] = volume_series
    features['volume_sma_20'] = volume_series.rolling(window=20).mean()
    features['volume_ratio'] = volume_series / features['volume_sma_20']
    features['target'] = (df.shift(-LOOKAHEAD) > df).astype(int)
    return features.dropna()

def train_xgboost(X_train, y_train):
    model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)
    model.fit(X_train, y_train)
    return model

def train_lstm(X, y):
    model = Sequential()
    model.add(LSTM(50, input_shape=(X.shape[1], X.shape[2]), return_sequences=True))
    model.add(Dropout(0.2))
    model.add(LSTM(50))
    model.add(Dropout(0.2))
    model.add(Dense(1, activation='sigmoid'))
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    model.fit(X, y, epochs=5, batch_size=32, verbose=0)
    return model

def place_order(symbol, direction, price):
    contract = Stock(symbol, 'SMART', 'USD')
    ib.qualifyContracts(contract)
    action = 'BUY' if direction == 'LONG' else 'SELL'

    parent = MarketOrder(action, ORDER_QUANTITY)
    parent.transmit = False

    tp_price = round(price * (1 + TAKE_PROFIT_PERCENT), 2) if direction == 'LONG' else round(price * (1 - TAKE_PROFIT_PERCENT), 2)
    sl_price = round(price * (1 - STOP_LOSS_PERCENT), 2) if direction == 'LONG' else round(price * (1 + STOP_LOSS_PERCENT), 2)

    tp_order = LimitOrder('SELL' if action == 'BUY' else 'BUY', ORDER_QUANTITY, tp_price, parentId=parent.orderId)
    tp_order.transmit = False

    sl_order = StopOrder('SELL' if action == 'BUY' else 'BUY', ORDER_QUANTITY, sl_price, parentId=parent.orderId)
    sl_order.transmit = True

    trade = ib.placeOrder(contract, parent)
    ib.placeOrder(contract, tp_order)
    ib.placeOrder(contract, sl_order)

    print(f"נשלחה הוראת {action} MARKET ל-{symbol} עם TP={tp_price}, SL={sl_price}")
    return trade

def recommend_stocks(adj_close_data, volume_data):
    recommendations = []
    for ticker in adj_close_data.columns:
        prices = adj_close_data[ticker].dropna()
        volume = volume_data[ticker].dropna()
        if len(prices) < 200 or len(volume) < 200:
            continue
        features = create_features(prices, volume)
        X = features.drop(['target', 'price'], axis=1)
        y = features['target']
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)
        X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, shuffle=False, random_state=42)
        xgb_model = train_xgboost(X_train, y_train)
        lstm_X = X_train.reshape((X_train.shape[0], 1, X_train.shape[1]))
        lstm_model = train_lstm(lstm_X, y_train)
        X_live = X_scaled[-1:]
        lstm_input = X_live.reshape((1, 1, X_live.shape[1]))
        xgb_prob = xgb_model.predict_proba(X_live)[0, 1]
        lstm_prob = lstm_model.predict(lstm_input)[0, 0]
        avg_prob = (xgb_prob + lstm_prob) / 2
        confidence = abs(avg_prob - 0.5)
        direction = "LONG" if avg_prob > 0.5 else "SHORT"
        price_now = prices.iloc[-1]
        if avg_prob > 0.80:
            trade = place_order(ticker, direction, price_now)
            recommendations.append((ticker, direction, round(avg_prob, 3), round(confidence, 3)))
    recommendations.sort(key=lambda x: x[3], reverse=True)
    return recommendations[:3]

def save_recommendations(recommendations):
    df = pd.DataFrame(recommendations, columns=['Ticker', 'Direction', 'Probability', 'Confidence'])
    filename = f"recommendations_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.csv"
    df.to_csv(filename, index=False)
    print(f"Recommendations saved to {filename}")

if __name__ == "__main__":
    tickers = expand_scanner(min_market_cap=10e9, min_volume=1e6)
    adj_close_data, volume_data = download_data_ib(tickers)
    if adj_close_data.empty:
        print("לא נמצאו מניות מתאימות לסריקה.")
    else:
        print("Loaded data for", len(adj_close_data.columns), "tickers")
        best_stocks = recommend_stocks(adj_close_data, volume_data)
        print("Top 3 Stock Recommendations:")
        for ticker, direction, prob, confidence in best_stocks:
            print(f"{ticker}: {direction} (prob={prob}, confidence={confidence})")
        if best_stocks:
            save_recommendations(best_stocks)
    
